git config --global user.name "Your Name"
git config --global user.email "email@example.com"

git init
git add 
git commit -m "dfaf"
git status -s
git log 
git log --oneline
#查看分支
git branch
#切换分支
git checkout + 分支
#删除分支
git branch -d (branchname)
#合并分支
git merge (branchname)
#查看log
git log --oneline --graph
#逆向查看日志
git log --reverse --oneline
git log --author=Linux --oneline -5
git log --pretty=oneline  #这个能查看到所有id
#查看差异
git diff file
#查看与某个版本的差异还可以添加路径
git diff HEAD -- [file/path]
#穿梭历史版本
git reset --hard commit_id 
#返回上一个版本
git reset --hard HEAD^  #HEAD表示当前版本
#查看后悔药来看log
git reflog
#命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
#一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
#一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
#总之，就是让这个文件回到最近一次git commit或git add时的状态。

#还有一种情况是当git add后已经放到暂存区了，并没有提交
git reset HEAD file #可以把git add 撤销掉  注意：这里没有加--hard
#小节：
#场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
#场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
#场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

#删除文件
#你已经git add 并且git commit 了一个文件 这时候你想删除该文件 你先本地rm file然后运行下面两条命令
git rm file 
git commit -m “remove file”
#当你删除出错 删除了版本库的文件 你可以使用git check out -- file恢复


#===================================================================================================
# 生存ssh key 
ssh-keygen -t rsa -C "280723148@qq.com"
cat ~/.ssh/id_rsa.pub 将这个添加到你的github账户上去 就可以提交代码到github

#我们在github上创建了一个空的repo：git_learn,然后添加一个README.md
echo "# git_learn" >> README.md
git init
git add README.md
git commit -m "first commit"
#运行以下命令就可以把本地仓库与远程仓库关联
#添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库
git remote add origin git@github.com:280723148/git_learn.git
#运行以下命令就可以就可以把本地内容推送到远程仓库
#由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
git push -u origin master
#以后只要本地做了提交 就可以使用
git push origin master #这样就把本地最新的master分支修改推送到github，这才是真正的分布式版本库

#小结：
#要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
#关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
#此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

#远程克隆
git clone git@github.com:michaelliao/gitskills.git
git clone git://104.130.246.128/openstack/horizon.git /opt/stack/horizon1 --branch master
#use ssh
git clone https://github.com/280723148/git_learn.git
#use https
git clone git@github.com:280723148/git_learn.git

#在GitHub上，可以任意Fork开源仓库；
#自己拥有Fork后的仓库的读写权限；
#可以推送pull request给官方仓库来贡献代码。


#==============================================================================================================

#分支管理
#创建分支
git branch branchname
#切换分支
git checkout branchname
#创建并切换分支
git checkout -b branchname
#查看当前所有分支
git branch
#合并分支 如果dev分支新增加文件，我们在master分支上就可以将dev的合并过来
git merge dev
#删除分支
git branch -d branchname
#开发一个新feature，最好新建一个分支
#如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

#合并不是每次都能成功的，当dev分支新提交了个a文件的修改，master分支也提交了a文件的修改，但这两个修改过不一样
#这时候在master分支上合并dev分支就会出错，这个时候就得直接修改master中的a文件然后提交了


#小节：
#Git鼓励大量使用分支：
#查看分支：git branch
#创建分支：git branch <name>
#切换分支：git checkout <name>
#创建+切换分支：git checkout -b <name>
#合并某分支到当前分支：git merge <name>
#删除分支：git branch -d <name>

#bug分支
#软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过
#一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
#git stash的使用，当我们在dev分支开发，可能要2天完成，临时需要解决一个master的bug，这时肯定要新建一个bug分支
#但当前的dev环境不能破坏，这时就可以使用stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash                 #先保存dev分支环境
git checkout master       #切换到master分支
git checkout -b bug       #新建bug分支并切换到bug分支
#修复bug文件bug.txt
git add bug.txt
git commit -m "fix bug "
git checkout master       #bug分支上修改完成回到master分支
git merge --no-ff -m "merged bug fix " bug #使用强制方式合并bug分支到master分支
git branch -d bug         #删除bug分支，bug修改完成
git checkout dev          #返回之前工作的dev分支
git status                #此时dev分支是干净的
git stash list            #查看刚才stash的暂存内容
#工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法
#一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
#一种是使用git stash pop，恢复的同时把stash内容也删除
git stash pop              
git stash list             #此时再查看就看不到stash内容了
#你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
git stash apply stash@{0}
#小结：修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
#当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。


#多人合作
#当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin
#查看远程库信息
git remote
git remote -v #显示更加详细的信息
#推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，
#这样，Git就会把该分支推送到远程库对应的远程分支上
git push origin master 
git push origin dev    #推送dev分支,如果远程没有dev分支，这样可以在远程创建dev分支
#然后另一个小伙伴从远程clone，默认只能看到本地的master分支，这时候小伙伴也要在dev分支上开发
git checkout -b dev origin/dev   #将远程dev创建到本地
#然后小伙伴就可以在dev分支修改然后时不时把dev分支push到远程
git push origin dev
#如果失败可能是别的小伙伴提交的dev分支跟你的冲突了，这时候应该先
git pull
#如果失败可能是没有指定本地dev分支与远程origin/dev分支的链接，设置dev与origin/dev的链接
git branch -set-upstream dev origin/dev #然后再git pull就可以了
#因此，多人协作的工作模式通常是这样：
#首先，可以试图用git push origin branch-name推送自己的修改；
#如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
#如果合并有冲突，则解决冲突，并在本地提交； #这里解决冲突会出现 下面的某种情况
#没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
#如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
#用命令git branch --set-upstream branch-name origin/branch-name。

#git pull 时 甲修改了文件A并且push到了git server上，这时乙也在修改文件A，他想看一下甲修改了什么，
#于是从git server上pull下来，但是会遇到这样的提示：
#    error: Your local changes to the following files would be overwritten by merge:
#            文件A
#    Please, commit your changes or stash them before you can merge.
#这时就需要使用到git stash 
git stash 
git pull 
git stash pop

#=========================================================================================================

#标签管理
#在当前commitId下打tag
git tag V1.0
#打标签时候带上说明 -a 制定标签名 -m 指定标签说明
git tag -a V1.0 -m "version 0.1 released" 
#查看所有标签
git tag
#给历史commitid打标签
git tag V0.9 commit_id
#查看某个标签
git show <tagname>
#如果标签打错了可以删除
git tag -d V0.1
#因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
git push origin <tagname>
#或者，一次性推送全部尚未推送到远程的本地标签
git push origin --tags
#如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除,然后，从远程删除。删除命令也是push，但是格式如下
git tag -d <tagname> #本地删除
git push origin :refs/tags/<tagname>
#小结
#命令git push origin <tagname>可以推送一个本地标签；
#命令git push origin --tags可以推送全部未推送过的本地标签；
#命令git tag -d <tagname>可以删除一个本地标签；
#命令git push origin :refs/tags/<tagname>可以删除一个远程标签
#==========================================================================================================
